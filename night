<?php

include_once(__dir__ . "/app/Lib/Web.php");

use App\Web\File;
use App\Web\Request;

CONST SERVER='https://nightframework.com/api-line/';

echo json_encode($argv)."\n";


class model{

  private $ver=1;
  private $dir_path=__dir__.'/app/Models/';

  function new(){

    MSG::textr('white','Model Template Downloading ...');

    // get model file name
    $name=API::$arg[3];

    $res=API::getJson(SERVER."new-model",['ver'=>$this->ver]);



    if ($res->ok) {
      $file=$this->newFile($this->dir_path,$name,$res->content);

      MSG::r();
      MSG::keyVal('File Path : ','"'.$file['path'].'"');
      MSG::keyVal('File name : ','"'.$file['file_name'].'"');
      MSG::r();

      MSG::textr('green','Model added successfully.');
      MSG::r();

    }

  }

  private function newFile($path,$name,$content)
  {
    $file_name="$name.php";

    // change class name in content
    $content = str_replace('@name',$name,$content);

    // add new file to model
    File::putContent($path.$file_name,$content);

    return['file_name'=>$file_name,'path'=>$path];
  }
}


class controller{

  private $ver=1;
  private $dir_path=__dir__.'/app/Controllers/';

  function new(){

    cerror::args_count(4,'controller');

    MSG::textr('white','Controller Template Downloading ...');

    // get model file name
    $name=API::$arg[3];

    $res=API::getJson(SERVER."new-controller",['ver'=>$this->ver]);

    if ($res->ok) {
      $file=$this->newFile($this->dir_path,$name,$res->content);

      MSG::r();
      MSG::keyVal('File Path : ','"'.$file['path'].'"');
      MSG::keyVal('File name : ','"'.$file['file_name'].'"');
      MSG::r();

      MSG::textr('green','Controller added successfully.');
      MSG::r();

    }

  }

  private function newFile($path,$name,$content)
  {
    $file_name=$name."Controller.php";

    // change class name in content
    $content = str_replace('@name',$name,$content);
    $content = str_replace('{name}',$name,$content);


    // add new file to model
    File::putContent($path.$file_name,$content);

    return['file_name'=>$file_name,'path'=>$path];
  }

  public static function hellp_text()
  {
    return 'example : php night controller new testname ';
  }
}

/**
 *
 */
class API
{
  public static $arg;
  public static $getClass;

  static function getString($url,$params)
  {
    return Request::api($url,$params,true);
  }

  static function getJson($url,$params){
    return json_decode(API::getString($url,$params));
  }
}


class cerror{
  static function args_count($number,$class_name=null)
  {
    $count=0;
    foreach (API::$arg as $key => $value) {
      if (strpos($value,'-') === false && strpos($value,'--')===false) {
        $count++;
      }
    }

    if ($count!= $number) {
      cerror::text("Invalid parameter number. $number parameters are needed You have sent $count parameters");
      if ($class_name!=null) {
        MSG::textr('yellow',$class_name::hellp_text());
      }
      die;
    }

  }

  public static function text($text)
  {
    MSG::textr('red',$text);
  }

  public function show($e)
  {
    // echo json_encode($e);
    // die;
  }
}

class MSG {
  private static $foreground_colors = array();
  private static $background_colors = array();
  private static $init_colors_status=false;

  public static function initColors() {
    if (! MSG::$init_colors_status) {


    MSG::$init_colors_status=true;
    // Set up shell colors
    MSG::$foreground_colors['black'] = '0;30';
    MSG::$foreground_colors['dark_gray'] = '1;30';
    MSG::$foreground_colors['blue'] = '0;34';
    MSG::$foreground_colors['light_blue'] = '1;34';
    MSG::$foreground_colors['green'] = '0;32';
    MSG::$foreground_colors['light_green'] = '1;32';
    MSG::$foreground_colors['cyan'] = '0;36';
    MSG::$foreground_colors['light_cyan'] = '1;36';
    MSG::$foreground_colors['red'] = '0;31';
    MSG::$foreground_colors['light_red'] = '1;31';
    MSG::$foreground_colors['purple'] = '0;35';
    MSG::$foreground_colors['light_purple'] = '1;35';
    MSG::$foreground_colors['brown'] = '0;33';
    MSG::$foreground_colors['yellow'] = '1;33';
    MSG::$foreground_colors['light_gray'] = '0;37';
    MSG::$foreground_colors['white'] = '1;37';

    MSG::$background_colors['black'] = '40';
    MSG::$background_colors['red'] = '41';
    MSG::$background_colors['green'] = '42';
    MSG::$background_colors['yellow'] = '43';
    MSG::$background_colors['blue'] = '44';
    MSG::$background_colors['magenta'] = '45';
    MSG::$background_colors['cyan'] = '46';
    MSG::$background_colors['light_gray'] = '47';
    }
  }

public static function text($color,$text){
  echo MSG::textByColor($text,$color);
}

public static function textr($color,$text)
{
  MSG::text($color,$text);
  MSG::r();
}
public static function rtext($color,$text)
{
  MSG::r();
  MSG::text($color,$text);
}

public static function rtextr($color,$text)
{
  MSG::r();
  MSG::text($color,$text);
  MSG::r();

}
public static function keyVal($text,$text2,$keyColor='yellow',$valColor='white')
{
  echo( MSG::textByColor($text,$keyColor) .MSG::textByColor($text2,$valColor) );
  MSG::r();

}


public static function r()
{
  echo "\n";
}
  // Returns colored string
public static function textByColor($string, $foreground_color = null/*, $background_color = null*/) {
  MSG::initColors();

    $colored_string = "";

    // Check if given foreground color found
    if (isset(MSG::$foreground_colors[$foreground_color])) {
      $colored_string .= "\033[" . MSG::$foreground_colors[$foreground_color] . "m";
    }
    // Check if given background color found
    // if (isset(MSG::$background_colors[$background_color])) {
    //   $colored_string .= "\033[" . MSG::$background_colors[$background_color] . "m";
    // }

    // Add string and end coloring
    $colored_string .=  $string . "\033[0m";

    return $colored_string;
  }

  // Returns all foreground color names
  public function getForegroundColors() {
    return array_keys(MSG::$foreground_colors);
  }

  // Returns all background color names
  public function getBackgroundColors() {
    return array_keys(MSG::$background_colors);
  }
}
//try {

  API::$arg=$argv;

  $getClass=$argv[1];
  $cl=new $getClass;

  $func=$argv[2];
  $cl->{$func}();


// }catch (\Throwable $t) {
//   cerror::show($t);
//
// } catch (\Exception $e) {
//   cerror::show($t);
// }
